import heapq

def get_grid_input():
    rows = int(input("Enter the number of rows: "))
    cols = int(input("Enter the number of columns: "))
    print("Enter the grid row by row (0 = walkable, 1 = obstacle):")
    grid = []
    for i in range(rows):
        row = list(map(int, input().split()))
        grid.append(row)
    return grid

class Node:
    def __init__(self, position, parent=None):
        self.position = position  
        self.parent = parent
        self.g = 0  
        self.h = 0  
        self.f = 0  

    def __lt__(self, other):
        return self.f < other.f 

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, goal):
    open_list = []
    closed_set = set()
    
    start_node = Node(start)
    goal_node = Node(goal)
    start_node.h = heuristic(start, goal)
    start_node.f = start_node.h

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.position == goal:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1] 

        closed_set.add(current_node.position)

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor_pos = (current_node.position[0] + dx, current_node.position[1] + dy)

            if (0 <= neighbor_pos[0] < len(grid)) and (0 <= neighbor_pos[1] < len(grid[0])) and grid[neighbor_pos[0]][neighbor_pos[1]] == 0:
                if neighbor_pos in closed_set:
                    continue

                neighbor = Node(neighbor_pos, current_node)
                neighbor.g = current_node.g + 1
                neighbor.h = heuristic(neighbor_pos, goal)
                neighbor.f = neighbor.g + neighbor.h

                if any(open_node.position == neighbor.position and open_node.f <= neighbor.f for open_node in open_list):
                    continue

                heapq.heappush(open_list, neighbor)

    return None

grid = get_grid_input()
start = tuple(map(int, input("Enter the start position (row column): ").split()))
goal = tuple(map(int, input("Enter the goal position (row column): ").split()))

path = astar(grid, start, goal)

if path:
    print("Shortest Path:", path)
else:
    print("No path found.")

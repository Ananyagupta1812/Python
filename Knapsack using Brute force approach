def knapsack_brute_force(values, weights, capacity):
    n = len(values)
    max_value = 0
    best_subset = []

    # Generate all possible subsets using bitmasking
    for i in range(1 << n):
        subset_value = 0
        subset_weight = 0
        subset = []

        for j in range(n):
            if i & (1 << j):
                subset_value += values[j]
                subset_weight += weights[j]
                subset.append(j)

        # Check if the subset is valid and update max_value if it is better
        if subset_weight <= capacity and subset_value > max_value:
            max_value = subset_value
            best_subset = subset

    return max_value, best_subset

def main():
    print("Enter the number of items: ")
    n = int(input())
    
    values = []
    weights = []
    
    print("Enter the values of the items: ")
    for _ in range(n):
        values.append(int(input()))
    
    print("Enter the weights of the items: ")
    for _ in range(n):
        weights.append(int(input()))
    
    print("Enter the capacity of the knapsack: ")
    capacity = int(input())
    
    max_value, best_subset = knapsack_brute_force(values, weights, capacity)
    
    print(f"Maximum value: {max_value}")
    print("Items in the knapsack (by index):", best_subset)

if __name__ == "__main__":
    main()

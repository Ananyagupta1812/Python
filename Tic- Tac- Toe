def print_board(board):
    """Displays the Tic-Tac-Toe board."""
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    """Checks if a player has won the game."""
    # Check rows and columns
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    
    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_full(board):
    """Checks if the board is full (game draw)."""
    return all(board[i][j] != " " for i in range(3) for j in range(3))

def tic_tac_toe():
    """Runs the Tic-Tac-Toe game."""
    board = [[" " for _ in range(3)] for _ in range(3)]  # Create 3x3 board
    players = ["X", "O"]  # Player symbols
    turn = 0  # Player turn index

    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        player = players[turn % 2]
        print(f"Player {player}, enter your move (row and column: 0 1 for middle-left):")

        try:
            row, col = map(int, input().split())
            if board[row][col] != " ":
                print("Invalid move! Cell already occupied. Try again.")
                continue
        except (ValueError, IndexError):
            print("Invalid input! Enter row and column as two numbers (0-2).")
            continue

        board[row][col] = player  # Make a move
        print_board(board)

        if check_winner(board, player):
            print(f"üéâ Player {player} wins! üéâ")
            break
        if is_full(board):
            print("It's a draw! ü§ù")
            break

        turn += 1  # Switch turns

# Run the game
tic_tac_toe()
